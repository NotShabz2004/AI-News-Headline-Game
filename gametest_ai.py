import pygame
import pygame_gui
import sys
import random
import json
import threading
from gpt4all import GPT4All
from pathlib import Path

model_path = Path.home() / 'AppData' / 'Local' / 'nomic.ai' / 'GPT4All'
model = GPT4All("Nous-Hermes-2-Mistral-7B-DPO.Q4_0.gguf", device='gpu', model_path=model_path)

gen_prompt = """
Imagine you are a journalist tasked with creating generic and boring headlines for breaking news stories. Your goal is to craft dull and monotonous headlines for each of these news stories. Be boring and cliche.
Example input:
{
"scenario": <scenario you need to make a headline on>
}

Reply in Json format as follows:
{
"headline": <your headline>
}
"""

judge_prompt = """
You're tasked with judging between two headlines, one generated by the user and another by the AI. Your goal is to determine which headline is more compelling.

Example input:
{
"user": "Local Community Comes Together to Plant 1000 Trees, Promoting Environmental Sustainability",
"AI": "Efforts to Enhance Green Spaces in Neighborhoods Gain Momentum with Tree Planting Initiative"
}

Evaluate both headlines and choose which one you find more engaging. Provide a small reason for your choice. Reply in JSON format as follows
Example result if you prefer the user's headline:
{
"headline choice": "User",
"reason": "While both headlines promote tree planting initiatives, the user's headline has a more personal touch by emphasizing the community's involvement, which tends to resonate better with readers. It conveys a sense of unity and shared responsibility towards environmental sustainability, making it more compelling."
}
Example result if you prefer the AI's headline:
{
"headline choice": "AI",
"reason": "While both headlines promote tree planting initiatives, the AI's headline highlights a growing effort to improve green spaces in neighborhoods through a tree planting initiative, signaling a proactive approach to environmental enhancement. It suggests community-wide involvement and ongoing progress, emphasizing the momentum behind the initiative."
}
"""

with open("scenarios.txt", "r") as f:
    scenarios = f.readlines()

pygame.init()

screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
WIDTH, HEIGHT = pygame.display.get_surface().get_size()
pygame.display.set_caption("Create a News Headline")

background_image = pygame.image.load("8bit.jpg")
background_image = pygame.transform.scale(background_image, (WIDTH, HEIGHT))

# Colors
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
BLACK = (0, 0, 0)

# Fonts
font = pygame.font.Font("serif_pixel-7.ttf", 40)
small_font = pygame.font.Font("serif_pixel-7.ttf", 32)

clock = pygame.time.Clock()

# Flags and global variables
is_ai_headline_generated = False
ai_headline = ""


def generate_scenario():
    # Generate a random scenario (you can customize this)
    return random.choice(scenarios)


def generate_ai_headline(scenario):
    global is_ai_headline_generated
    global ai_headline
    # Generate an AI headline based on the scenario (you can customize this)
    input_text = json.dumps({"scenario": scenario})
    with model.chat_session(gen_prompt):
        response = model.generate(input_text)
        index = response.find('}')
        response_json = json.loads(response[:index + 1])
        ai_headline = response_json['headline']
        is_ai_headline_generated = True


def display_wrapped_text(title, text, font, position):
    y = position[1]
    screen.blit(font.render(title, True, WHITE), (position[0], y))
    y += 60
    lines = text.split("\n")
    for line in lines:
        screen.blit(font.render(line, True, WHITE), (position[0], y))
        y += 60


def compare_headlines(user_headline):
    # just comparing length here u can change later if its based on anything else
    # if len(user_headline) > len(ai_headline):
    #     return "Your headline is longer!"
    # elif len(user_headline) < len(ai_headline):
    #     return "AI's headline is longer!"
    # else:
    #     return "It's a tie!"
    headline_dict = json.dumps({
        "user": user_headline,
        "AI": ai_headline
    })
    with model.chat_session(judge_prompt):
        response = model.generate(headline_dict)
        index = response.find('}')
        response_json = json.loads(response[:index + 1])
        return response_json


def main_menu():
    main_menu_manager = pygame_gui.UIManager((WIDTH, HEIGHT), "theme.json")
    menu_options = ["Play", "How to Play", "Quit"]

    # Initializing buttons
    button_list = []
    for i, option in enumerate(menu_options):
        button_rect = pygame.Rect(0, 0, -1, -1)
        button_rect.centery = (i * 90) - 90
        button = pygame_gui.elements.UIButton(relative_rect=button_rect, text=option, manager=main_menu_manager,
                                              anchors={'center': 'center'})
        button_list.append(button)

    while True:
        time_delta = clock.tick(60) / 1000.0
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame_gui.UI_BUTTON_PRESSED:
                if event.ui_element == button_list[0]:
                    return "Play"
                if event.ui_element == button_list[1]:
                    return "How to Play"
                if event.ui_element == button_list[2]:
                    pygame.quit()
                    sys.exit()

            main_menu_manager.process_events(event)

        main_menu_manager.update(time_delta)

        screen.blit(background_image, (0, 0))
        main_menu_manager.draw_ui(screen)

        pygame.display.update()


def how_to_play():
    how_to_play_manager = pygame_gui.UIManager((WIDTH, HEIGHT), "theme.json")
    how_to_play_text = """
    How to Play:

    1. Type your news headline based on the scenario.
    2. Press Enter when you're done typing.
        
    Remember, the AI will also generate its own headline!
        
    Press 'Backspace' to delete characters.
    Press 'Enter' to continue...
    """

    instructions_label_rect = pygame.Rect(0, 0, WIDTH - 300, -1)
    instructions_label = pygame_gui.elements.UITextBox(html_text=how_to_play_text, manager=how_to_play_manager,
                                                       relative_rect=instructions_label_rect,
                                                       anchors={"center": "center"}, wrap_to_height=True,
                                                       object_id="#instructions")
    instructions_label.set_relative_position((0, 0))

    back_button_rect = pygame.Rect(20, 20, -1, -1)
    back_button = pygame_gui.elements.UIButton(relative_rect=back_button_rect, manager=how_to_play_manager,
                                               text="Back")

    while True:
        time_delta = clock.tick(60) / 1000.0
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    return

            if event.type == pygame_gui.UI_BUTTON_PRESSED:
                if event.ui_element == back_button:
                    return

            how_to_play_manager.process_events(event)

        how_to_play_manager.update(time_delta)

        screen.blit(background_image, (0, 0))
        how_to_play_manager.draw_ui(screen)

        pygame.display.update()


def display_result(image):
    result_image = pygame.image.load(image)
    result_image = pygame.transform.scale(result_image, (WIDTH, HEIGHT))
    screen.blit(result_image, (0, 0))
    pygame.display.update()
    pygame.time.delay(3000)


def display_win():
    win_ui_manager = pygame_gui.UIManager((WIDTH, HEIGHT), "theme.json")

    # Glitch Text
    win_text_rect = pygame.Rect(0, 0, -1, -1)
    win_text = "YOU WIN"
    win_text_red_textbox = pygame_gui.elements.UITextBox(relative_rect=win_text_rect, manager=win_ui_manager,
                                                         anchors={"center": "center"}, html_text=win_text,
                                                         object_id="#win-text-red")
    win_text_red_textbox.set_relative_position((0, 0))

    win_text_blue_textbox = pygame_gui.elements.UITextBox(relative_rect=win_text_rect, manager=win_ui_manager,
                                                          anchors={"center": "center"}, html_text=win_text,
                                                          object_id="#win-text-blue")
    win_text_blue_textbox.set_relative_position((0, 0))

    win_text_white_textbox = pygame_gui.elements.UITextBox(relative_rect=win_text_rect, manager=win_ui_manager,
                                                           anchors={"center": "center"}, html_text=win_text,
                                                           object_id="#win-text-white")
    win_text_white_textbox.set_relative_position((0, 0))

    # Press enter to continue text
    cta_text_rect = pygame.Rect(0, 100, -1, -1)
    cta_text_label = pygame_gui.elements.UILabel(relative_rect=cta_text_rect, manager=win_ui_manager,
                                                 anchors={"center": "center"}, text="Press enter to continue")
    cta_text_label.set_active_effect(pygame_gui.TEXT_EFFECT_FADE_IN, params={"time_per_alpha_change": 0.001})

    animation_playing = True
    while animation_playing:
        time_delta = clock.tick(60) / 1000.0
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    animation_playing = False

            win_ui_manager.process_events(event)

        win_ui_manager.update(time_delta)

        posx, posy = (random.randint(-20, 20), random.randint(-10, 10))
        win_text_white_textbox.set_relative_position((posx, posy))
        win_text_red_textbox.set_relative_position((posx + random.randint(-7, 7),
                                                    posy + random.randint(-7, 7)))
        win_text_blue_textbox.set_relative_position((posx + random.randint(-7, 7),
                                                     posy + random.randint(-7, 7)))
        screen.fill((0, 0, 0))
        win_ui_manager.draw_ui(screen)

        pygame.display.update()
        clock.tick(15)


def main():
    global ai_headline, is_ai_headline_generated
    user_win_image = "8bitwin.jpg"
    ai_win_image = "8bitlose.jpg"

    while True:
        selected_option = main_menu()

        if selected_option == "Play":
            play_ui_manager = pygame_gui.UIManager((WIDTH, HEIGHT), "theme.json")

            scenario_label_rect = pygame.Rect(0, 0, WIDTH - 200, 250)
            scenario = generate_scenario()
            scenario_text_box = pygame_gui.elements.UITextBox(relative_rect=scenario_label_rect, html_text=scenario,
                                                              manager=play_ui_manager,
                                                              anchors={"left": "left", "right": "right",
                                                                       "center": "center"},
                                                              wrap_to_height=True, object_id="#scenario")
            scenario_text_box.set_relative_position((0, -250))

            enter_headline_label_rect = pygame.Rect(0, 10, -1, -1)
            enter_headline_label = pygame_gui.elements.UILabel(relative_rect=enter_headline_label_rect,
                                                               text="Your News Headline:", manager=play_ui_manager,
                                                               anchors={"right": "right", "top": "top",
                                                                        "right_target": scenario_text_box,
                                                                        "top_target": scenario_text_box})

            entry_rect = pygame.Rect(0, 5, WIDTH // 2, HEIGHT // 8)
            entry = pygame_gui.elements.UITextEntryBox(relative_rect=entry_rect, manager=play_ui_manager,
                                                       anchors={"right": "right",
                                                                "top": "top",
                                                                "top_target": enter_headline_label,
                                                                "right_target": enter_headline_label},
                                                       object_id="#entry_box")

            submit_button_rect = pygame.Rect(20, 0, -1, -1)
            submit_button = pygame_gui.elements.UIButton(relative_rect=submit_button_rect, manager=play_ui_manager,
                                                         text="Submit",
                                                         anchors={"left": "left", "centery": "centery",
                                                                  "left_target": entry, "centery_target": entry})

            ai_headline_heading_label_rect = pygame.Rect(0, 50, -1, -1)
            ai_headline_heading_label = pygame_gui.elements.UILabel(relative_rect=ai_headline_heading_label_rect,
                                                                    text="AI's News Headline:", manager=play_ui_manager,
                                                                    anchors={"right": "right", "top": "top",
                                                                             "right_target": entry,
                                                                             "top_target": entry})

            # ai_headline = generate_ai_headline(scenario)
            ai_headline_rect = pygame.Rect(0, 5, -1, -1)
            ai_headline_label = pygame_gui.elements.UILabel(relative_rect=ai_headline_rect, text="Loading",
                                                            manager=play_ui_manager,
                                                            anchors={"right": "right", "top": "top",
                                                                     "right_target": ai_headline_heading_label,
                                                                     "top_target": ai_headline_heading_label})

            ai_headline_generation_thread = threading.Thread(target=generate_ai_headline, args=(scenario,))
            ai_headline_generation_thread.start()

            is_playing = True

            while is_playing:
                time_delta = clock.tick(60) / 1000.0
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        sys.exit()

                    if event.type == pygame_gui.UI_BUTTON_PRESSED:
                        if event.ui_element == submit_button and is_ai_headline_generated:
                            is_ai_headline_generated = False
                            result = compare_headlines(entry.get_text())

                            # if result == "Your headline is longer!":
                            #     # display_result(user_win_image)
                            #     display_win()
                            # elif result == "AI's headline is longer!":
                            #     display_result(ai_win_image)
                            # is_playing = False

                            print(result)
                            if result["headline choice"].lower() == "user":
                                display_win()
                            elif result["headline choice"].lower() == "ai":
                                display_result(ai_win_image)
                            is_playing = False

                    play_ui_manager.process_events(event)

                play_ui_manager.update(time_delta)

                if not ai_headline_generation_thread.is_alive():
                    ai_headline_label.set_text(ai_headline)

                screen.blit(background_image, (0, 0))
                play_ui_manager.draw_ui(screen)

                pygame.display.update()

        elif selected_option == "How to Play":
            how_to_play()

        elif selected_option == "Quit":
            pygame.quit()
            sys.exit()


if __name__ == "__main__":
    main()
